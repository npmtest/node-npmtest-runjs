{"/home/travis/build/npmtest/node-npmtest-runjs/test.js":"/* istanbul instrument in package npmtest_runjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-runjs/lib.npmtest_runjs.js":"/* istanbul instrument in package npmtest_runjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_runjs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_runjs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-runjs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-runjs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_runjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_runjs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_runjs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_runjs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_runjs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_runjs.__dirname + '/lib.npmtest_runjs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-runjs/node_modules/runjs/lib/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.logger = undefined;\nexports.run = run;\nexports.generate = generate;\nexports.ask = ask;\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nvar _child_process = require('child_process');\n\nvar _child_process2 = _interopRequireDefault(_child_process);\n\nvar _lodash = require('lodash.template');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _readline = require('readline');\n\nvar _readline2 = _interopRequireDefault(_readline);\n\nvar _common = require('./common');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar logger = exports.logger = {\n  debug: function debug() {\n    console.log(_chalk2.default.blue.apply(_chalk2.default, arguments));\n  },\n  info: function info() {\n    console.log(_chalk2.default.bold.apply(_chalk2.default, arguments));\n  },\n  log: function log() {\n    var _console;\n\n    (_console = console).log.apply(_console, arguments);\n  },\n  warning: function warning() {\n    console.warn(_chalk2.default.yellow.apply(_chalk2.default, arguments));\n  },\n  error: function error() {\n    console.error(_chalk2.default.red.apply(_chalk2.default, arguments));\n  }\n};\n\nvar loggerAlias = logger;\n\nfunction runSync(command, options) {\n  try {\n    var buffer = _child_process2.default.execSync(command, options);\n    if (buffer) {\n      return buffer.toString();\n    }\n    return buffer;\n  } catch (error) {\n    throw new _common.RunJSError(error.message);\n  }\n}\n\nfunction runAsync(command, options) {\n  return new Promise(function (resolve, reject) {\n    var asyncProcess = _child_process2.default.spawn(command, options);\n    var output = null;\n\n    asyncProcess.on('error', function (error) {\n      reject(new Error('Failed to start command: ' + command + '; ' + error));\n    });\n\n    asyncProcess.on('close', function (exitCode) {\n      if (exitCode === 0) {\n        resolve(output);\n      } else {\n        reject(new Error('Command failed: ' + command + ' with exit code ' + exitCode));\n      }\n    });\n\n    if (options.stdio === 'pipe') {\n      asyncProcess.stdout.on('data', function (buffer) {\n        output = buffer.toString();\n      });\n    }\n\n    if (options.timeout) {\n      setTimeout(function () {\n        asyncProcess.kill();\n        reject(new Error('Command timeout: ' + command));\n      }, options.timeout);\n    }\n  });\n}\n\nfunction run(command) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var logger = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : loggerAlias;\n\n  var binPath = _path2.default.resolve('./node_modules/.bin');\n\n  // Pick relevant option keys and set default values\n  options = {\n    env: options.env || process.env,\n    cwd: options.cwd,\n    async: !!options.async,\n    stdio: options.stdio || 'inherit',\n    timeout: options.timeout,\n    shell: true\n  };\n\n  // Include in PATH node_modules bin path\n  options.env.PATH = [binPath, options.env.PATH || process.env.PATH].join(_path2.default.delimiter);\n\n  logger.info(command);\n\n  // Handle async call\n  if (options.async) {\n    return runAsync(command, options);\n  }\n\n  // Handle sync call by default\n  return runSync(command, options);\n}\n\nfunction generate(src, dst, context) {\n  console.log('Generating ' + dst + ' from template ' + src);\n  var templateString = _fs2.default.readFileSync(src);\n  var content = (0, _lodash2.default)(templateString)(context);\n  _fs2.default.writeFileSync(dst, content);\n}\n\nfunction ask(question) {\n  var readlineInterface = _readline2.default.createInterface({\n    input: process.stdin,\n    output: process.stdout\n  });\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      try {\n        readlineInterface.question(question + ' ', function (answer) {\n          resolve(answer);\n          readlineInterface.close();\n        });\n      } catch (error) {\n        reject(error);\n        readlineInterface.close();\n      }\n    }, 0);\n  });\n}","/home/travis/build/npmtest/node-npmtest-runjs/node_modules/runjs/lib/common.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RunJSError = RunJSError;\n// Needed to use ES5 inheritance, because of issues with Error subclassing for Babel\nfunction RunJSError(message) {\n  this.name = 'RunJSError';\n  this.message = message && message.split('\\n')[0]; // assign only first line\n}\nRunJSError.prototype = Object.create(Error.prototype);\nRunJSError.prototype.constructor = RunJSError;","/home/travis/build/npmtest/node-npmtest-runjs/node_modules/runjs/bin/run.js":"#!/usr/bin/env node\n'use strict'\nconst script = require('../lib/script')\nconst api = require('../lib/index')\nconst common = require('../lib/common')\n\ntry {\n  const config = script.config('./package.json')\n  const runfile = script.load('./runfile', config, api.logger, script.requirer, script.hasAccess)\n  const ARGV = process.argv.slice(2)\n\n  if (ARGV.length) {\n    let decoratedRunfile = script.decorate(runfile, api.logger)\n    script.call(decoratedRunfile, ARGV)\n  } else {\n    script.describe(runfile, api.logger)\n  }\n} catch (error) {\n  if (error instanceof common.RunJSError) {\n    api.logger.error(error.message)\n    process.exit(1)\n  } else {\n    throw error\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-runjs/node_modules/runjs/lib/script.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.requirer = requirer;\nexports.hasAccess = hasAccess;\nexports.config = config;\nexports.load = load;\nexports.describe = describe;\nexports.decorate = decorate;\nexports.call = call;\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _common = require('./common');\n\nvar _getParameterNames = require('get-parameter-names');\n\nvar _getParameterNames2 = _interopRequireDefault(_getParameterNames);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction requirer(filePath) {\n  return require(_path2.default.resolve(filePath));\n}\n\nfunction hasAccess(filePath) {\n  return _fs2.default.accessSync(_path2.default.resolve(filePath));\n}\n\nfunction config(filePath) {\n  var config = void 0;\n  try {\n    config = require(filePath).runjs || {};\n  } catch (error) {\n    config = {};\n  }\n  return config;\n}\n\nfunction load(runfilePath, config, logger, requirer, access) {\n  // try to load babel-register\n  try {\n    logger.log('Requiring babel-register...');\n    if (config['babel-register']) {\n      requirer(config['babel-register']);\n    } else {\n      requirer('./node_modules/babel-register');\n    }\n  } catch (error) {\n    logger.log('Requiring failed. Fallback to pure node.');\n    if (config['babel-register']) {\n      throw error;\n    }\n  }\n\n  // process runfile.js\n  logger.log('Processing runfile...');\n\n  try {\n    access(runfilePath + '.js');\n  } catch (error) {\n    throw new _common.RunJSError('No ' + runfilePath + '.js defined in ' + process.cwd());\n  }\n\n  var runfile = requirer(runfilePath);\n  if (runfile.default) {\n    return runfile.default;\n  }\n  return runfile;\n}\n\nfunction parseArgs(args) {\n  var options = {};\n  var nextArgs = args.filter(function (arg) {\n    var doubleDashMatch = arg.match(/^--([\\w-.]+)=([\\w-.]*)$/) || arg.match(/^--([\\w-.]+)$/);\n    var singleDashMatch = arg.match(/^-(?!-)([\\w-.])=([\\w-.]*)$/) || arg.match(/^-(?!-)([\\w-.])$/);\n\n    if (singleDashMatch) {\n      options[singleDashMatch[1]] = Number(singleDashMatch[2]) || singleDashMatch[2] || true;\n      return false;\n    }\n\n    if (doubleDashMatch) {\n      options[doubleDashMatch[1]] = Number(doubleDashMatch[2]) || doubleDashMatch[2] || true;\n      return false;\n    }\n\n    return true;\n  });\n\n  if (Object.keys(options).length) {\n    nextArgs.push(options);\n  }\n  return nextArgs;\n}\n\nfunction describe(obj, logger, namespace) {\n  if (!namespace) {\n    logger.debug('Available tasks:');\n  }\n\n  Object.keys(obj).forEach(function (key) {\n    var value = obj[key];\n    var nextNamespace = namespace ? namespace + ':' + key : key;\n    var doc = value.doc;\n\n    if (typeof value === 'function') {\n      var funcParams = void 0;\n      try {\n        funcParams = (0, _getParameterNames2.default)(value);\n      } catch (error) {\n        funcParams = [];\n      }\n      var paramsDoc = funcParams.length ? '[' + funcParams.join(' ') + ']' : '';\n      logger.info('\\n', nextNamespace, paramsDoc);\n      if (doc) {\n        logger.log('   ' + doc);\n      }\n    } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {\n      describe(value, logger, nextNamespace);\n    }\n  });\n}\n\nfunction decorate(obj, logger, namespace) {\n  var nextObj = {};\n  Object.keys(obj).forEach(function (key) {\n    var value = obj[key];\n    var nextNamespace = namespace ? namespace + ':' + key : key;\n\n    if (typeof value === 'function') {\n      nextObj[key] = function () {\n        var time = Date.now();\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        if (args.length) {\n          logger.debug('Running \"' + nextNamespace + '\" with ' + JSON.stringify(args) + '...');\n        } else {\n          logger.debug('Running \"' + nextNamespace + '\"...');\n        }\n        value.apply(null, args);\n        time = ((Date.now() - time) / 1000).toFixed(2);\n        logger.debug('Finished \"' + nextNamespace + '\" in ' + time + ' sec');\n      };\n    }\n\n    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {\n      nextObj[key] = decorate(value, logger, nextNamespace);\n    }\n  });\n  return nextObj;\n}\n\nfunction call(obj, args) {\n  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  var taskName = args[0];\n\n  if (typeof obj[taskName] === 'function') {\n    obj[taskName].apply(null, parseArgs(args.slice(1)));\n    return obj[taskName];\n  }\n\n  var namespaces = taskName.split(':');\n  var rootNamespace = namespaces.shift();\n  var nextTaskName = namespaces.join(':');\n  var nextArgs = args.slice();\n  nextArgs[0] = nextTaskName;\n\n  if (obj[rootNamespace]) {\n    var calledTask = call(obj[rootNamespace], nextArgs, depth + 1);\n    if (calledTask) {\n      return calledTask;\n    }\n  }\n\n  if (!depth) {\n    throw new _common.RunJSError('Task ' + taskName + ' not found');\n  }\n}","/home/travis/build/npmtest/node-npmtest-runjs/node_modules/runjs/lib/utils.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.logger = undefined;\nexports.RunJSError = RunJSError;\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Needed to use ES5 inheritance, because of issues with Error subclassing for Babel\nfunction RunJSError(message) {\n  this.name = 'RunJSError';\n  this.message = message && message.split('\\n')[0]; // assign only first line\n}\nRunJSError.prototype = Object.create(Error.prototype);\nRunJSError.prototype.constructor = RunJSError;\n\nvar logger = exports.logger = {\n  debug: function debug() {\n    console.log(_chalk2.default.blue.apply(_chalk2.default, arguments));\n  },\n  info: function info() {\n    console.log(_chalk2.default.bold.apply(_chalk2.default, arguments));\n  },\n  log: function log() {\n    var _console;\n\n    (_console = console).log.apply(_console, arguments);\n  },\n  warning: function warning() {\n    console.warn(_chalk2.default.yellow.apply(_chalk2.default, arguments));\n  },\n  error: function error() {\n    console.error(_chalk2.default.red.apply(_chalk2.default, arguments));\n  }\n};"}